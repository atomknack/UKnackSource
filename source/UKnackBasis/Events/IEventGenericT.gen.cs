//----------------------------------------------------------------------------------------
// <auto-generated> This code was generated from EventInterfaces
// Changes will be lost if the code is regenerated.</auto-generated>
//----------------------------------------------------------------------------------------

using System;
using UnityEngine.Events;

namespace UKnack.Events;

public static partial class IEventUnSubscribeNullSafeExtension
{
    public static void UnsubscribeNullSafe<T>(this IEvent<T> ev, Action<T> subscriber)
        { if (subscriber != null) ev.Unsubscribe(subscriber); }
    public static void UnsubscribeNullSafe<T>(this IEvent<T> ev, UnityEvent<T> subscriber)
        { if (subscriber != null) ev.Unsubscribe(subscriber); }
    public static void UnsubscribeNullSafe<T>(this IEvent<T> ev, ISubscriberToEvent<T> subscriber)
        { if (subscriber != null) ev.Unsubscribe(subscriber); }
}
public interface IEvent<T>
{
    public static IEvent<T> Validate(UnityEngine.Object obj) =>
        CommonStatic.ValidCast<IEvent<T>>(obj);

    /// <summary>
    /// Subscribes reciever of event
    /// </summary>
    /// <param name="subscriber">To unsubscribe use UnsubscribeNullSafe extension method.
    /// subscriber will be called when something is published to event</param>
    public void Subscribe(Action<T> subscriber);
    internal void Unsubscribe(Action<T> subscriber);

    /// <summary>
    /// Subscribes reciever of event
    /// </summary>
    /// <param name="subscriber">To unsubscribe use UnsubscribeNullSafe extension method.
    /// subscriber will be called when something is published to event</param>
    public void Subscribe(UnityEvent<T> subscriber);
    internal void Unsubscribe(UnityEvent<T> subscriber);

    /// <summary>
    /// Subscribes reciever of event
    /// </summary>
    /// <param name="subscriber">To unsubscribe use UnsubscribeNullSafe extension method.
    /// subscriber will be called when something is published to event</param>
    public void Subscribe(ISubscriberToEvent<T> subscriber);
    internal void Unsubscribe(ISubscriberToEvent<T> subscriber);

}

