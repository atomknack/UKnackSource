//----------------------------------------------------------------------------------------
// <auto-generated> This code was generated from EventScriptableObject
// Changes will be lost if the code is regenerated.</auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
#if UNITY_EDITOR
using UnityEditor;
using System.Diagnostics;
#endif
using UnityEngine;
using UnityEngine.Events;

namespace UKnack.Events;

public abstract class SOEvent : ScriptableObjectWithReadOnlyName, IEvent
{
    [NonSerialized] internal readonly List<UnityEvent> subscribedByUnityEvent = new List<UnityEvent>();
    [NonSerialized] internal readonly List<Action> subscribedByCSEvent = new List<Action>();
    [NonSerialized] internal readonly List<ISubscriberToEvent> subscribedByISubscriberToEvent = new List<ISubscriberToEvent>();
#if UNITY_EDITOR
    [NonSerialized] protected readonly Dictionary<object,string> debugSubscriberDescription = new Dictionary<object,string>();
#endif
    
    [NonSerialized] private string _savedName;

    /// <summary>
    /// Subscribes reciever of event
    /// </summary>
    /// <param name="subscriber">To unsubscribe use UnsubscribeNullSafe extension method.
    /// subscriber will be called when something is published to event</param>
    public virtual void Subscribe(Action subscriber) 
    {
        if (subscriber == null)
            throw new ArgumentNullException(nameof(subscriber));
        subscribedByCSEvent.Add(subscriber);
#if UNITY_EDITOR
var method= new StackFrame(1).GetMethod();
        debugSubscriberDescription[subscriber] = $"method: {method.Name}, declared by: {method.DeclaringType}";
#endif
    }
    internal virtual void Unsubscribe(Action subscriber)
    {
#if UNITY_EDITOR
if (subscriber == null)
    throw new ArgumentNullException(nameof(subscriber));
int subscriberCount = subscribedByCSEvent.Count(x=>x==subscriber);
if ( subscriberCount!= 1)
    throw new ArgumentException($"{nameof(subscriber)} has not 1, but {subscriberCount} references in Event {this.name}, fulldescription: {debugSubscriberDescription[subscriber]}");    
debugSubscriberDescription.Remove(subscriber);
#endif
            
        bool removed = subscribedByCSEvent.Remove(subscriber);

#if UNITY_EDITOR
if (removed == false)
    throw new ArgumentException($"could not remove {nameof(subscriber)}"); 
#endif
    }
    void IEvent.Unsubscribe(Action subscriber) => 
        Unsubscribe(subscriber);

    internal virtual bool IsOneOfSubscribers(Action subscriber)
    {
        if (subscriber == null)
            throw new ArgumentNullException(nameof(subscriber));

        return subscribedByCSEvent.Contains(subscriber);
    }

    /// <summary>
    /// Subscribes reciever of event
    /// </summary>
    /// <param name="subscriber">To unsubscribe use UnsubscribeNullSafe extension method.
    /// subscriber will be called when something is published to event</param>
    public virtual void Subscribe(UnityEvent subscriber) 
    {
        if (subscriber == null)
            throw new ArgumentNullException(nameof(subscriber));
        subscribedByUnityEvent.Add(subscriber);
#if UNITY_EDITOR
var method= new StackFrame(1).GetMethod();
        debugSubscriberDescription[subscriber] = $"method: {method.Name}, declared by: {method.DeclaringType}";
#endif
    }
    internal virtual void Unsubscribe(UnityEvent subscriber)
    {
#if UNITY_EDITOR
if (subscriber == null)
    throw new ArgumentNullException(nameof(subscriber));
int subscriberCount = subscribedByUnityEvent.Count(x=>x==subscriber);
if ( subscriberCount!= 1)
    throw new ArgumentException($"{nameof(subscriber)} has not 1, but {subscriberCount} references in Event {this.name}, fulldescription: {debugSubscriberDescription[subscriber]}");    
debugSubscriberDescription.Remove(subscriber);
#endif
            
        bool removed = subscribedByUnityEvent.Remove(subscriber);

#if UNITY_EDITOR
if (removed == false)
    throw new ArgumentException($"could not remove {nameof(subscriber)}"); 
#endif
    }
    void IEvent.Unsubscribe(UnityEvent subscriber) => 
        Unsubscribe(subscriber);

    internal virtual bool IsOneOfSubscribers(UnityEvent subscriber)
    {
        if (subscriber == null)
            throw new ArgumentNullException(nameof(subscriber));

        return subscribedByUnityEvent.Contains(subscriber);
    }

    /// <summary>
    /// Subscribes reciever of event
    /// </summary>
    /// <param name="subscriber">To unsubscribe use UnsubscribeNullSafe extension method.
    /// subscriber will be called when something is published to event</param>
    public virtual void Subscribe(ISubscriberToEvent subscriber) 
    {
        if (subscriber == null)
            throw new ArgumentNullException(nameof(subscriber));
        subscribedByISubscriberToEvent.Add(subscriber);
#if UNITY_EDITOR
var method= new StackFrame(1).GetMethod();
        debugSubscriberDescription[subscriber] = $"method: {method.Name}, declared by: {method.DeclaringType}";
#endif
    }
    internal virtual void Unsubscribe(ISubscriberToEvent subscriber)
    {
#if UNITY_EDITOR
if (subscriber == null)
    throw new ArgumentNullException(nameof(subscriber));
int subscriberCount = subscribedByISubscriberToEvent.Count(x=>x==subscriber);
if ( subscriberCount!= 1)
    throw new ArgumentException($"{nameof(subscriber)} has not 1, but {subscriberCount} references in Event {this.name}, fulldescription: {debugSubscriberDescription[subscriber]}");    
debugSubscriberDescription.Remove(subscriber);
#endif
            
        bool removed = subscribedByISubscriberToEvent.Remove(subscriber);

#if UNITY_EDITOR
if (removed == false)
    throw new ArgumentException($"could not remove {nameof(subscriber)}"); 
#endif
    }
    void IEvent.Unsubscribe(ISubscriberToEvent subscriber) => 
        Unsubscribe(subscriber);

    internal virtual bool IsOneOfSubscribers(ISubscriberToEvent subscriber)
    {
        if (subscriber == null)
            throw new ArgumentNullException(nameof(subscriber));

        return subscribedByISubscriberToEvent.Contains(subscriber);
    }

    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal virtual void InternalInvoke()
    {
        InvokeSubscribers(this);
    }

    internal static void InvokeSubscribers(SOEvent soe)
    {
        if (soe==null)
            throw new ArgumentNullException(nameof(soe));
        //internalEvent.Publish();

        for (int i = 0; i<soe.subscribedByCSEvent.Count; ++i)
        {
            soe.subscribedByCSEvent[i]?.Invoke();
        }
        for (int i = 0; i<soe.subscribedByUnityEvent.Count; ++i)
        {
            soe.subscribedByUnityEvent[i]?.Invoke();
        }
        for (int i = 0; i<soe.subscribedByISubscriberToEvent.Count; ++i)
        {
            if(soe.subscribedByISubscriberToEvent[i]!=null)
                soe.subscribedByISubscriberToEvent[i].OnEventNotification();
        }
    }

protected virtual void Init()
{
    _savedName = name;
    //var countOnInitStart = CheckCount();
    //if (countOnInitStart>0)
    //    UnityEngineDebug.Log($"SOEvent {name} have {countOnInitStart} subscribers at init start");
    //subscribedByCSEvent.Clear();
}

protected virtual void Cleanup()
{
}

    protected void OnEnable()
    {
    Init();
#if UNITY_EDITOR
        EditorApplication.playModeStateChanged += OnPlayModeStateChanged;
#endif
    }
    protected void OnDisable()
    {
    Cleanup();
#if UNITY_EDITOR
        EditorApplication.playModeStateChanged -= OnPlayModeStateChanged;
#endif
    }

#if UNITY_EDITOR
    private void OnPlayModeStateChanged(PlayModeStateChange state)
    {
        if (state != PlayModeStateChange.ExitingPlayMode) 
            return;
        //Debug.Log($"CSEvents:{subscribedByCSEvent.Count}, UnityEvents:{subscribedByUnityEvent.Count}");
        
        Cleanup();
        CommonStatic.DoActionLater(500, () => 
            { 
                //UnityEngine.Debug.Log("Checking count after wait"); 
                DebugCheckCount(); 
            });
    }
#endif
    protected virtual int SubscribersCount() => subscribedByCSEvent.Count + subscribedByUnityEvent.Count + subscribedByISubscriberToEvent.Count;

    private int DebugCheckCount()
    {
    //Debug.Log($"CheckCount");
    int result = SubscribersCount();
        if (result>0)
        {
            UnityEngine.Debug.LogError(
$"CheckCount for {_savedName} NOT ZERO: CSEvents:{subscribedByCSEvent.Count}, UnityEvents:{subscribedByUnityEvent.Count}, ISubscriberToEvent:{subscribedByISubscriberToEvent.Count}");

#if UNITY_EDITOR
            foreach (var sub in subscribedByCSEvent)
                UnityEngine.Debug.Log($"csEvent subscribed by ({debugSubscriberDescription[sub]}) not unsubscribed, check (un)subscriber object");

            foreach (var sub in subscribedByUnityEvent)
                UnityEngine.Debug.Log($"unityEvent subscribed by ({debugSubscriberDescription[sub]}) not unsubscribed, check (un)subscriber object");

            foreach (var sub in subscribedByISubscriberToEvent)
                UnityEngine.Debug.Log($"ISubscriberToEvent subscribed by ({sub.Description} from {debugSubscriberDescription[sub]}) not unsubscribed, check (un)subscriber object");
#endif
        }
    return result;
    }

}

