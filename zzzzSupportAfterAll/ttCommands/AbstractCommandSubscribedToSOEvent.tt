<#@ template language="C#" hostspecific="True"#>
<#@ include file="C:\Projects\DoubleEngine\Project\_Include\_0_AssemplyImports.ttinclude" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="..\ttinclude\_1_AddonTools.ttinclude" #>
<#@ include file="..\ttinclude\_4_GenGenericType.ttinclude" #>
<#@ include file="..\ttinclude\_6_eventTypeNames.ttinclude" #>
<#@ include file="..\ttinclude\_6_generics.ttinclude" #>
<# var tools = AddonTools.Create(Host, GenerationEnvironment); #>
// this file was generated as byproduct of generating *.gen.cs files from master template: <#=tools.Filename#>
<# 
string pathToSave = "../../UKnackBasis/Preconcrete/Commands/";

for(var i = 0; i<generics.Length; i++)
    {

	GenGenericType generic = generics[i];
    
    string filename = pathToSave +$"AbstractCommandSubscribedToSOEvent{generic.resultFileName}"+".gen.cs";

    tools.LogAndStartNewFileWithHeader(filename);
    #>
using System;
using UKnack.Attributes;
using UKnack.Commands;
using UKnack.Events;
using UnityEngine;

namespace UKnack.Preconcrete.Commands;

public abstract class AbstractCommandSubscribedToSOEvent<#=generic.GenericDeclaration#> : CommandMonoBehaviour<#=generic.GenericDeclaration#>, ISubscriberToEvent<#=generic.GenericDeclaration#>
{
    //[SerializeField]
    //[ValidReference(typeof(IEvent<#=generic.GenericDeclaration#>))] //commented because this is not allowed
    //private SOEvent<#=generic.GenericDeclaration#> _subscribedTo;

    private IEvent<#=generic.GenericDeclaration#> _iSubscribedTo;

    protected abstract IEvent<#=generic.GenericDeclaration#> SubscribedTo { get; }

    public virtual void OnEventNotification(<#=generic.GenericArgumentsDeclaration()#>) => 
        Execute(<#=generic.publishArguments#>);

    protected virtual void OnEnable()
    {
        _iSubscribedTo = SubscribedTo;
        if (_iSubscribedTo == null)
            throw new ArgumentNullException(nameof(_iSubscribedTo));
        _iSubscribedTo.Subscribe(this);
    }
    protected virtual void OnDisable()
    {
         _iSubscribedTo.UnsubscribeNullSafe(this);
    }
}

<#  tools.EndBlock();
    } #>
<# 
tools.Process(true, false); //split files true, because we want separate files; //sync false because we don't want visual studio to create links to created files
#>