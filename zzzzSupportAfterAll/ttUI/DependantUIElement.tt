<#@ template language="C#" hostspecific="True"#>
<#@ include file="C:\Projects\DoubleEngine\Project\_Include\_0_AssemplyImports.ttinclude" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="..\ttinclude\_1_AddonTools.ttinclude" #>
<# var tools = AddonTools.Create(Host, GenerationEnvironment); #>
// this file was generated as byproduct of generating *.gen.cs files from master template: <#=tools.Filename#>
<# 
//this script exists because Unity not very good with generics

string pathToSave = "../../UKnackPro/Preconcrete/UI/Dependants/_GeneratedBehaviours_/"; 
string filename(string filenameWithoutExtension) =>pathToSave+filenameWithoutExtension+".cs";

(string name, string lower)[] typeNames = new[]{
    ("Button", "button"), 
    ("Toggle",  "toggle"), 
    ("Slider", "slider")
    };

for(var i = 0; i<typeNames.Length; i++)
    {

	var concrete = typeNames[i];

    string name = concrete.name;
    string lower = concrete.lower;

    string genericScriptname = "DependantUIElement";
    string concreteClassname = genericScriptname + "_" + concrete.name;
    tools.LogAndStartNewFileWithHeader(filename(concreteClassname)); #>




#nullable disable

using UKnack.Attributes;
using UKnack.UI;
using UnityEngine;
using UnityEngine.UIElements;

namespace UKnack.Preconcrete.UI.Dependants;

public abstract class <#=concreteClassname#> : Dependant
{
    [SerializeField]
    [DisableEditingInPlaymode]
    private string _<#=lower#>Name;

    protected <#=name#> _<#=lower#> { get; private set; }

    protected abstract void LayoutReadyAndElementFound(VisualElement layout);
    protected abstract void LayoutCleanupBeforeDestruction();

    protected override void OnLayoutCreatedAndReady(VisualElement layout)
    {
        _<#=lower#> = layout.Q<<#=name#>>(_<#=lower#>Name);
        ThrowIfNotFoundVisualElement(_<#=lower#>Name, _<#=lower#>);
        LayoutReadyAndElementFound(layout);
    }

    protected override void OnLayoutGonnaBeDestroyedNow() =>
        LayoutCleanupBeforeDestruction();

    protected static void ThrowIfNotFoundVisualElement(string id, VisualElement ve)
    {
        if (ve == null)
            throw new System.ArgumentNullException($"button with id: {id} not found in UIDocument");
    }
}


<#  tools.EndBlock();
    } #>
<# tools.Process(true, false); #>