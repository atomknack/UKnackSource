<#@ template language="C#" 
#><#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Runtime.CompilerServices"
#><#@ import namespace="System.Runtime.Remoting.Messaging"
#><#@ include file="C:\Projects\DoubleEngine\Project\_Include\_1_ManagerMultipleOutputHelper_new22.ttinclude"#><#+
class AddonTools
{
	public readonly Manager manager;
    private readonly ITextTemplatingEngineHost _host;
    private readonly StringBuilder _template;
	//private readonly ITextTemplatingEngine _engine;

	public Action headerWriter;

	public readonly string _hostFilenameWithExtension;
	public string Filename => Path.GetFileNameWithoutExtension(_hostFilenameWithExtension);

    public static AddonTools Create(ITextTemplatingEngineHost host, StringBuilder template) => // ITextTemplatingEngine engine,
		new AddonTools(host, template); // engine, 

    public void LogAndStartNewFileWithHeader(String name)
    {
        _template.AppendLine($"//// Generating: {name}");
        StartNewFile(name);
		headerWriter?.Invoke();
    }
	public void StartNewFile(String name) => manager.StartNewFile(name);
	public void StartFooter(bool includeInDefault = true) => manager.StartFooter(includeInDefault);
	public void StartHeader(bool includeInDefault = true) => manager.StartHeader(includeInDefault);
	public void EndBlock() => manager.EndBlock();
	public void Process(bool split, bool sync = true) => manager.Process(split, sync);
	public String GetCustomToolNamespace(String fileName) => manager.GetCustomToolNamespace(fileName);
	public String DefaultProjectNamespace => manager.DefaultProjectNamespace;

    public void IncludeFileWithContext(String filename, Dictionary<string, object> context)
    {
        string templateFile = _host.ResolvePath(filename);
        string templateContent = File.ReadAllText(templateFile);
		foreach(var item in context)
		{
			CallContext.LogicalSetData(item.Key, item.Value);
		}
        string generatedContent = new Engine().ProcessTemplate(templateContent, _host);
		foreach(var item in context)
		{
			CallContext.FreeNamedDataSlot(item.Key);
		}
		Write(generatedContent);
    }

	private void DefaultHeaderWriter_FourLineAutoGenHeader()
	{ #>
//----------------------------------------------------------------------------------------
// <auto-generated> This code was generated from <#=Filename#>
// Changes will be lost if the code is regenerated.</auto-generated>
//----------------------------------------------------------------------------------------
<#+ }

	[Obsolete("Not tested")]
    internal AddonTools(ITextTemplatingEngineHost host, StringBuilder template) // ITextTemplatingEngine engine, 
        {
            _host = host;
            _template = template;
            // _engine = engine;
			_hostFilenameWithExtension = new FileInfo( _host.TemplateFile ).Name;
			manager = Manager.Create(_host, _template);
			headerWriter = DefaultHeaderWriter_FourLineAutoGenHeader;
        }

	private void Write(string str) => _template.Append(str);
}
#>